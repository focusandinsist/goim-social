// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: group.grpc.proto

package rest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GroupService_GetGroupMemberIDs_FullMethodName   = "/rest.GroupService/GetGroupMemberIDs"
	GroupService_ValidateGroupMember_FullMethodName = "/rest.GroupService/ValidateGroupMember"
)

// GroupServiceClient is the client API for GroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupServiceClient interface {
	// 获取群组成员ID列表（用于群消息推送）
	GetGroupMemberIDs(ctx context.Context, in *GetGroupMemberIDsRequest, opts ...grpc.CallOption) (*GetGroupMemberIDsResponse, error)
	// 验证群成员身份（用于群消息发送权限验证）
	ValidateGroupMember(ctx context.Context, in *ValidateGroupMemberRequest, opts ...grpc.CallOption) (*ValidateGroupMemberResponse, error)
}

type groupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupServiceClient(cc grpc.ClientConnInterface) GroupServiceClient {
	return &groupServiceClient{cc}
}

func (c *groupServiceClient) GetGroupMemberIDs(ctx context.Context, in *GetGroupMemberIDsRequest, opts ...grpc.CallOption) (*GetGroupMemberIDsResponse, error) {
	out := new(GetGroupMemberIDsResponse)
	err := c.cc.Invoke(ctx, GroupService_GetGroupMemberIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) ValidateGroupMember(ctx context.Context, in *ValidateGroupMemberRequest, opts ...grpc.CallOption) (*ValidateGroupMemberResponse, error) {
	out := new(ValidateGroupMemberResponse)
	err := c.cc.Invoke(ctx, GroupService_ValidateGroupMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupServiceServer is the server API for GroupService service.
// All implementations must embed UnimplementedGroupServiceServer
// for forward compatibility
type GroupServiceServer interface {
	// 获取群组成员ID列表（用于群消息推送）
	GetGroupMemberIDs(context.Context, *GetGroupMemberIDsRequest) (*GetGroupMemberIDsResponse, error)
	// 验证群成员身份（用于群消息发送权限验证）
	ValidateGroupMember(context.Context, *ValidateGroupMemberRequest) (*ValidateGroupMemberResponse, error)
	mustEmbedUnimplementedGroupServiceServer()
}

// UnimplementedGroupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGroupServiceServer struct {
}

func (UnimplementedGroupServiceServer) GetGroupMemberIDs(context.Context, *GetGroupMemberIDsRequest) (*GetGroupMemberIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMemberIDs not implemented")
}
func (UnimplementedGroupServiceServer) ValidateGroupMember(context.Context, *ValidateGroupMemberRequest) (*ValidateGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateGroupMember not implemented")
}
func (UnimplementedGroupServiceServer) mustEmbedUnimplementedGroupServiceServer() {}

// UnsafeGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupServiceServer will
// result in compilation errors.
type UnsafeGroupServiceServer interface {
	mustEmbedUnimplementedGroupServiceServer()
}

func RegisterGroupServiceServer(s grpc.ServiceRegistrar, srv GroupServiceServer) {
	s.RegisterService(&GroupService_ServiceDesc, srv)
}

func _GroupService_GetGroupMemberIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMemberIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GetGroupMemberIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GetGroupMemberIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GetGroupMemberIDs(ctx, req.(*GetGroupMemberIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_ValidateGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).ValidateGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_ValidateGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).ValidateGroupMember(ctx, req.(*ValidateGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupService_ServiceDesc is the grpc.ServiceDesc for GroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rest.GroupService",
	HandlerType: (*GroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGroupMemberIDs",
			Handler:    _GroupService_GetGroupMemberIDs_Handler,
		},
		{
			MethodName: "ValidateGroupMember",
			Handler:    _GroupService_ValidateGroupMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group.grpc.proto",
}
