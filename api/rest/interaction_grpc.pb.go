// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: interaction.proto

package rest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InteractionService_DoInteraction_FullMethodName         = "/rest.InteractionService/DoInteraction"
	InteractionService_UndoInteraction_FullMethodName       = "/rest.InteractionService/UndoInteraction"
	InteractionService_CheckInteraction_FullMethodName      = "/rest.InteractionService/CheckInteraction"
	InteractionService_BatchCheckInteraction_FullMethodName = "/rest.InteractionService/BatchCheckInteraction"
	InteractionService_GetObjectStats_FullMethodName        = "/rest.InteractionService/GetObjectStats"
	InteractionService_GetBatchObjectStats_FullMethodName   = "/rest.InteractionService/GetBatchObjectStats"
	InteractionService_GetUserInteractions_FullMethodName   = "/rest.InteractionService/GetUserInteractions"
	InteractionService_GetObjectInteractions_FullMethodName = "/rest.InteractionService/GetObjectInteractions"
)

// InteractionServiceClient is the client API for InteractionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InteractionServiceClient interface {
	// 基础互动操作
	DoInteraction(ctx context.Context, in *DoInteractionRequest, opts ...grpc.CallOption) (*DoInteractionResponse, error)
	UndoInteraction(ctx context.Context, in *UndoInteractionRequest, opts ...grpc.CallOption) (*UndoInteractionResponse, error)
	CheckInteraction(ctx context.Context, in *CheckInteractionRequest, opts ...grpc.CallOption) (*CheckInteractionResponse, error)
	BatchCheckInteraction(ctx context.Context, in *BatchCheckInteractionRequest, opts ...grpc.CallOption) (*BatchCheckInteractionResponse, error)
	// 统计查询
	GetObjectStats(ctx context.Context, in *GetObjectStatsRequest, opts ...grpc.CallOption) (*GetObjectStatsResponse, error)
	GetBatchObjectStats(ctx context.Context, in *GetBatchObjectStatsRequest, opts ...grpc.CallOption) (*GetBatchObjectStatsResponse, error)
	// 列表查询
	GetUserInteractions(ctx context.Context, in *GetUserInteractionsRequest, opts ...grpc.CallOption) (*GetUserInteractionsResponse, error)
	GetObjectInteractions(ctx context.Context, in *GetObjectInteractionsRequest, opts ...grpc.CallOption) (*GetObjectInteractionsResponse, error)
}

type interactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInteractionServiceClient(cc grpc.ClientConnInterface) InteractionServiceClient {
	return &interactionServiceClient{cc}
}

func (c *interactionServiceClient) DoInteraction(ctx context.Context, in *DoInteractionRequest, opts ...grpc.CallOption) (*DoInteractionResponse, error) {
	out := new(DoInteractionResponse)
	err := c.cc.Invoke(ctx, InteractionService_DoInteraction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) UndoInteraction(ctx context.Context, in *UndoInteractionRequest, opts ...grpc.CallOption) (*UndoInteractionResponse, error) {
	out := new(UndoInteractionResponse)
	err := c.cc.Invoke(ctx, InteractionService_UndoInteraction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) CheckInteraction(ctx context.Context, in *CheckInteractionRequest, opts ...grpc.CallOption) (*CheckInteractionResponse, error) {
	out := new(CheckInteractionResponse)
	err := c.cc.Invoke(ctx, InteractionService_CheckInteraction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) BatchCheckInteraction(ctx context.Context, in *BatchCheckInteractionRequest, opts ...grpc.CallOption) (*BatchCheckInteractionResponse, error) {
	out := new(BatchCheckInteractionResponse)
	err := c.cc.Invoke(ctx, InteractionService_BatchCheckInteraction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) GetObjectStats(ctx context.Context, in *GetObjectStatsRequest, opts ...grpc.CallOption) (*GetObjectStatsResponse, error) {
	out := new(GetObjectStatsResponse)
	err := c.cc.Invoke(ctx, InteractionService_GetObjectStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) GetBatchObjectStats(ctx context.Context, in *GetBatchObjectStatsRequest, opts ...grpc.CallOption) (*GetBatchObjectStatsResponse, error) {
	out := new(GetBatchObjectStatsResponse)
	err := c.cc.Invoke(ctx, InteractionService_GetBatchObjectStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) GetUserInteractions(ctx context.Context, in *GetUserInteractionsRequest, opts ...grpc.CallOption) (*GetUserInteractionsResponse, error) {
	out := new(GetUserInteractionsResponse)
	err := c.cc.Invoke(ctx, InteractionService_GetUserInteractions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) GetObjectInteractions(ctx context.Context, in *GetObjectInteractionsRequest, opts ...grpc.CallOption) (*GetObjectInteractionsResponse, error) {
	out := new(GetObjectInteractionsResponse)
	err := c.cc.Invoke(ctx, InteractionService_GetObjectInteractions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InteractionServiceServer is the server API for InteractionService service.
// All implementations must embed UnimplementedInteractionServiceServer
// for forward compatibility
type InteractionServiceServer interface {
	// 基础互动操作
	DoInteraction(context.Context, *DoInteractionRequest) (*DoInteractionResponse, error)
	UndoInteraction(context.Context, *UndoInteractionRequest) (*UndoInteractionResponse, error)
	CheckInteraction(context.Context, *CheckInteractionRequest) (*CheckInteractionResponse, error)
	BatchCheckInteraction(context.Context, *BatchCheckInteractionRequest) (*BatchCheckInteractionResponse, error)
	// 统计查询
	GetObjectStats(context.Context, *GetObjectStatsRequest) (*GetObjectStatsResponse, error)
	GetBatchObjectStats(context.Context, *GetBatchObjectStatsRequest) (*GetBatchObjectStatsResponse, error)
	// 列表查询
	GetUserInteractions(context.Context, *GetUserInteractionsRequest) (*GetUserInteractionsResponse, error)
	GetObjectInteractions(context.Context, *GetObjectInteractionsRequest) (*GetObjectInteractionsResponse, error)
	mustEmbedUnimplementedInteractionServiceServer()
}

// UnimplementedInteractionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInteractionServiceServer struct {
}

func (UnimplementedInteractionServiceServer) DoInteraction(context.Context, *DoInteractionRequest) (*DoInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoInteraction not implemented")
}
func (UnimplementedInteractionServiceServer) UndoInteraction(context.Context, *UndoInteractionRequest) (*UndoInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndoInteraction not implemented")
}
func (UnimplementedInteractionServiceServer) CheckInteraction(context.Context, *CheckInteractionRequest) (*CheckInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckInteraction not implemented")
}
func (UnimplementedInteractionServiceServer) BatchCheckInteraction(context.Context, *BatchCheckInteractionRequest) (*BatchCheckInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCheckInteraction not implemented")
}
func (UnimplementedInteractionServiceServer) GetObjectStats(context.Context, *GetObjectStatsRequest) (*GetObjectStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectStats not implemented")
}
func (UnimplementedInteractionServiceServer) GetBatchObjectStats(context.Context, *GetBatchObjectStatsRequest) (*GetBatchObjectStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchObjectStats not implemented")
}
func (UnimplementedInteractionServiceServer) GetUserInteractions(context.Context, *GetUserInteractionsRequest) (*GetUserInteractionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInteractions not implemented")
}
func (UnimplementedInteractionServiceServer) GetObjectInteractions(context.Context, *GetObjectInteractionsRequest) (*GetObjectInteractionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectInteractions not implemented")
}
func (UnimplementedInteractionServiceServer) mustEmbedUnimplementedInteractionServiceServer() {}

// UnsafeInteractionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InteractionServiceServer will
// result in compilation errors.
type UnsafeInteractionServiceServer interface {
	mustEmbedUnimplementedInteractionServiceServer()
}

func RegisterInteractionServiceServer(s grpc.ServiceRegistrar, srv InteractionServiceServer) {
	s.RegisterService(&InteractionService_ServiceDesc, srv)
}

func _InteractionService_DoInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).DoInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_DoInteraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).DoInteraction(ctx, req.(*DoInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_UndoInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndoInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).UndoInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_UndoInteraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).UndoInteraction(ctx, req.(*UndoInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_CheckInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).CheckInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_CheckInteraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).CheckInteraction(ctx, req.(*CheckInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_BatchCheckInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCheckInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).BatchCheckInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_BatchCheckInteraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).BatchCheckInteraction(ctx, req.(*BatchCheckInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_GetObjectStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).GetObjectStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_GetObjectStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).GetObjectStats(ctx, req.(*GetObjectStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_GetBatchObjectStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatchObjectStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).GetBatchObjectStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_GetBatchObjectStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).GetBatchObjectStats(ctx, req.(*GetBatchObjectStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_GetUserInteractions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInteractionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).GetUserInteractions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_GetUserInteractions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).GetUserInteractions(ctx, req.(*GetUserInteractionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_GetObjectInteractions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectInteractionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).GetObjectInteractions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_GetObjectInteractions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).GetObjectInteractions(ctx, req.(*GetObjectInteractionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InteractionService_ServiceDesc is the grpc.ServiceDesc for InteractionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InteractionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rest.InteractionService",
	HandlerType: (*InteractionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoInteraction",
			Handler:    _InteractionService_DoInteraction_Handler,
		},
		{
			MethodName: "UndoInteraction",
			Handler:    _InteractionService_UndoInteraction_Handler,
		},
		{
			MethodName: "CheckInteraction",
			Handler:    _InteractionService_CheckInteraction_Handler,
		},
		{
			MethodName: "BatchCheckInteraction",
			Handler:    _InteractionService_BatchCheckInteraction_Handler,
		},
		{
			MethodName: "GetObjectStats",
			Handler:    _InteractionService_GetObjectStats_Handler,
		},
		{
			MethodName: "GetBatchObjectStats",
			Handler:    _InteractionService_GetBatchObjectStats_Handler,
		},
		{
			MethodName: "GetUserInteractions",
			Handler:    _InteractionService_GetUserInteractions_Handler,
		},
		{
			MethodName: "GetObjectInteractions",
			Handler:    _InteractionService_GetObjectInteractions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interaction.proto",
}
