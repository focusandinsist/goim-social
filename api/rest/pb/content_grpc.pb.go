// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: content.proto

package rest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ContentService_CreateContent_FullMethodName       = "/rest.ContentService/CreateContent"
	ContentService_UpdateContent_FullMethodName       = "/rest.ContentService/UpdateContent"
	ContentService_GetContent_FullMethodName          = "/rest.ContentService/GetContent"
	ContentService_DeleteContent_FullMethodName       = "/rest.ContentService/DeleteContent"
	ContentService_PublishContent_FullMethodName      = "/rest.ContentService/PublishContent"
	ContentService_ChangeContentStatus_FullMethodName = "/rest.ContentService/ChangeContentStatus"
	ContentService_GetUserContent_FullMethodName      = "/rest.ContentService/GetUserContent"
	ContentService_GetContentStats_FullMethodName     = "/rest.ContentService/GetContentStats"
	ContentService_CreateTag_FullMethodName           = "/rest.ContentService/CreateTag"
	ContentService_GetTags_FullMethodName             = "/rest.ContentService/GetTags"
	ContentService_CreateTopic_FullMethodName         = "/rest.ContentService/CreateTopic"
	ContentService_GetTopics_FullMethodName           = "/rest.ContentService/GetTopics"
	ContentService_CreateComment_FullMethodName       = "/rest.ContentService/CreateComment"
	ContentService_DeleteComment_FullMethodName       = "/rest.ContentService/DeleteComment"
	ContentService_GetComments_FullMethodName         = "/rest.ContentService/GetComments"
	ContentService_GetCommentReplies_FullMethodName   = "/rest.ContentService/GetCommentReplies"
	ContentService_DoInteraction_FullMethodName       = "/rest.ContentService/DoInteraction"
	ContentService_UndoInteraction_FullMethodName     = "/rest.ContentService/UndoInteraction"
	ContentService_CheckInteraction_FullMethodName    = "/rest.ContentService/CheckInteraction"
	ContentService_GetInteractionStats_FullMethodName = "/rest.ContentService/GetInteractionStats"
	ContentService_GetContentDetail_FullMethodName    = "/rest.ContentService/GetContentDetail"
	ContentService_GetContentFeed_FullMethodName      = "/rest.ContentService/GetContentFeed"
	ContentService_GetTrendingContent_FullMethodName  = "/rest.ContentService/GetTrendingContent"
)

// ContentServiceClient is the client API for ContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentServiceClient interface {
	// 内容管理
	CreateContent(ctx context.Context, in *CreateContentRequest, opts ...grpc.CallOption) (*CreateContentResponse, error)
	UpdateContent(ctx context.Context, in *UpdateContentRequest, opts ...grpc.CallOption) (*UpdateContentResponse, error)
	GetContent(ctx context.Context, in *GetContentRequest, opts ...grpc.CallOption) (*GetContentResponse, error)
	DeleteContent(ctx context.Context, in *DeleteContentRequest, opts ...grpc.CallOption) (*DeleteContentResponse, error)
	PublishContent(ctx context.Context, in *PublishContentRequest, opts ...grpc.CallOption) (*PublishContentResponse, error)
	ChangeContentStatus(ctx context.Context, in *ChangeContentStatusRequest, opts ...grpc.CallOption) (*ChangeContentStatusResponse, error)
	// 内容查询
	GetUserContent(ctx context.Context, in *GetUserContentRequest, opts ...grpc.CallOption) (*GetUserContentResponse, error)
	GetContentStats(ctx context.Context, in *GetContentStatsRequest, opts ...grpc.CallOption) (*GetContentStatsResponse, error)
	// 标签管理
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error)
	GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (*GetTagsResponse, error)
	// 话题管理
	CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error)
	GetTopics(ctx context.Context, in *GetTopicsRequest, opts ...grpc.CallOption) (*GetTopicsResponse, error)
	// 评论管理
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
	GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (*GetCommentsResponse, error)
	GetCommentReplies(ctx context.Context, in *GetCommentRepliesRequest, opts ...grpc.CallOption) (*GetCommentRepliesResponse, error)
	// 互动管理
	DoInteraction(ctx context.Context, in *DoInteractionRequest, opts ...grpc.CallOption) (*DoInteractionResponse, error)
	UndoInteraction(ctx context.Context, in *UndoInteractionRequest, opts ...grpc.CallOption) (*UndoInteractionResponse, error)
	CheckInteraction(ctx context.Context, in *CheckInteractionRequest, opts ...grpc.CallOption) (*CheckInteractionResponse, error)
	GetInteractionStats(ctx context.Context, in *GetInteractionStatsRequest, opts ...grpc.CallOption) (*GetInteractionStatsResponse, error)
	// 综合查询
	GetContentDetail(ctx context.Context, in *GetContentDetailRequest, opts ...grpc.CallOption) (*GetContentDetailResponse, error)
	GetContentFeed(ctx context.Context, in *GetContentFeedRequest, opts ...grpc.CallOption) (*GetContentFeedResponse, error)
	GetTrendingContent(ctx context.Context, in *GetTrendingContentRequest, opts ...grpc.CallOption) (*GetTrendingContentResponse, error)
}

type contentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentServiceClient(cc grpc.ClientConnInterface) ContentServiceClient {
	return &contentServiceClient{cc}
}

func (c *contentServiceClient) CreateContent(ctx context.Context, in *CreateContentRequest, opts ...grpc.CallOption) (*CreateContentResponse, error) {
	out := new(CreateContentResponse)
	err := c.cc.Invoke(ctx, ContentService_CreateContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) UpdateContent(ctx context.Context, in *UpdateContentRequest, opts ...grpc.CallOption) (*UpdateContentResponse, error) {
	out := new(UpdateContentResponse)
	err := c.cc.Invoke(ctx, ContentService_UpdateContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetContent(ctx context.Context, in *GetContentRequest, opts ...grpc.CallOption) (*GetContentResponse, error) {
	out := new(GetContentResponse)
	err := c.cc.Invoke(ctx, ContentService_GetContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DeleteContent(ctx context.Context, in *DeleteContentRequest, opts ...grpc.CallOption) (*DeleteContentResponse, error) {
	out := new(DeleteContentResponse)
	err := c.cc.Invoke(ctx, ContentService_DeleteContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) PublishContent(ctx context.Context, in *PublishContentRequest, opts ...grpc.CallOption) (*PublishContentResponse, error) {
	out := new(PublishContentResponse)
	err := c.cc.Invoke(ctx, ContentService_PublishContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) ChangeContentStatus(ctx context.Context, in *ChangeContentStatusRequest, opts ...grpc.CallOption) (*ChangeContentStatusResponse, error) {
	out := new(ChangeContentStatusResponse)
	err := c.cc.Invoke(ctx, ContentService_ChangeContentStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetUserContent(ctx context.Context, in *GetUserContentRequest, opts ...grpc.CallOption) (*GetUserContentResponse, error) {
	out := new(GetUserContentResponse)
	err := c.cc.Invoke(ctx, ContentService_GetUserContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetContentStats(ctx context.Context, in *GetContentStatsRequest, opts ...grpc.CallOption) (*GetContentStatsResponse, error) {
	out := new(GetContentStatsResponse)
	err := c.cc.Invoke(ctx, ContentService_GetContentStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error) {
	out := new(CreateTagResponse)
	err := c.cc.Invoke(ctx, ContentService_CreateTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (*GetTagsResponse, error) {
	out := new(GetTagsResponse)
	err := c.cc.Invoke(ctx, ContentService_GetTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error) {
	out := new(CreateTopicResponse)
	err := c.cc.Invoke(ctx, ContentService_CreateTopic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetTopics(ctx context.Context, in *GetTopicsRequest, opts ...grpc.CallOption) (*GetTopicsResponse, error) {
	out := new(GetTopicsResponse)
	err := c.cc.Invoke(ctx, ContentService_GetTopics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error) {
	out := new(CreateCommentResponse)
	err := c.cc.Invoke(ctx, ContentService_CreateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	out := new(DeleteCommentResponse)
	err := c.cc.Invoke(ctx, ContentService_DeleteComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (*GetCommentsResponse, error) {
	out := new(GetCommentsResponse)
	err := c.cc.Invoke(ctx, ContentService_GetComments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetCommentReplies(ctx context.Context, in *GetCommentRepliesRequest, opts ...grpc.CallOption) (*GetCommentRepliesResponse, error) {
	out := new(GetCommentRepliesResponse)
	err := c.cc.Invoke(ctx, ContentService_GetCommentReplies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DoInteraction(ctx context.Context, in *DoInteractionRequest, opts ...grpc.CallOption) (*DoInteractionResponse, error) {
	out := new(DoInteractionResponse)
	err := c.cc.Invoke(ctx, ContentService_DoInteraction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) UndoInteraction(ctx context.Context, in *UndoInteractionRequest, opts ...grpc.CallOption) (*UndoInteractionResponse, error) {
	out := new(UndoInteractionResponse)
	err := c.cc.Invoke(ctx, ContentService_UndoInteraction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) CheckInteraction(ctx context.Context, in *CheckInteractionRequest, opts ...grpc.CallOption) (*CheckInteractionResponse, error) {
	out := new(CheckInteractionResponse)
	err := c.cc.Invoke(ctx, ContentService_CheckInteraction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetInteractionStats(ctx context.Context, in *GetInteractionStatsRequest, opts ...grpc.CallOption) (*GetInteractionStatsResponse, error) {
	out := new(GetInteractionStatsResponse)
	err := c.cc.Invoke(ctx, ContentService_GetInteractionStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetContentDetail(ctx context.Context, in *GetContentDetailRequest, opts ...grpc.CallOption) (*GetContentDetailResponse, error) {
	out := new(GetContentDetailResponse)
	err := c.cc.Invoke(ctx, ContentService_GetContentDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetContentFeed(ctx context.Context, in *GetContentFeedRequest, opts ...grpc.CallOption) (*GetContentFeedResponse, error) {
	out := new(GetContentFeedResponse)
	err := c.cc.Invoke(ctx, ContentService_GetContentFeed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetTrendingContent(ctx context.Context, in *GetTrendingContentRequest, opts ...grpc.CallOption) (*GetTrendingContentResponse, error) {
	out := new(GetTrendingContentResponse)
	err := c.cc.Invoke(ctx, ContentService_GetTrendingContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServiceServer is the server API for ContentService service.
// All implementations must embed UnimplementedContentServiceServer
// for forward compatibility
type ContentServiceServer interface {
	// 内容管理
	CreateContent(context.Context, *CreateContentRequest) (*CreateContentResponse, error)
	UpdateContent(context.Context, *UpdateContentRequest) (*UpdateContentResponse, error)
	GetContent(context.Context, *GetContentRequest) (*GetContentResponse, error)
	DeleteContent(context.Context, *DeleteContentRequest) (*DeleteContentResponse, error)
	PublishContent(context.Context, *PublishContentRequest) (*PublishContentResponse, error)
	ChangeContentStatus(context.Context, *ChangeContentStatusRequest) (*ChangeContentStatusResponse, error)
	// 内容查询
	GetUserContent(context.Context, *GetUserContentRequest) (*GetUserContentResponse, error)
	GetContentStats(context.Context, *GetContentStatsRequest) (*GetContentStatsResponse, error)
	// 标签管理
	CreateTag(context.Context, *CreateTagRequest) (*CreateTagResponse, error)
	GetTags(context.Context, *GetTagsRequest) (*GetTagsResponse, error)
	// 话题管理
	CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicResponse, error)
	GetTopics(context.Context, *GetTopicsRequest) (*GetTopicsResponse, error)
	// 评论管理
	CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error)
	GetComments(context.Context, *GetCommentsRequest) (*GetCommentsResponse, error)
	GetCommentReplies(context.Context, *GetCommentRepliesRequest) (*GetCommentRepliesResponse, error)
	// 互动管理
	DoInteraction(context.Context, *DoInteractionRequest) (*DoInteractionResponse, error)
	UndoInteraction(context.Context, *UndoInteractionRequest) (*UndoInteractionResponse, error)
	CheckInteraction(context.Context, *CheckInteractionRequest) (*CheckInteractionResponse, error)
	GetInteractionStats(context.Context, *GetInteractionStatsRequest) (*GetInteractionStatsResponse, error)
	// 综合查询
	GetContentDetail(context.Context, *GetContentDetailRequest) (*GetContentDetailResponse, error)
	GetContentFeed(context.Context, *GetContentFeedRequest) (*GetContentFeedResponse, error)
	GetTrendingContent(context.Context, *GetTrendingContentRequest) (*GetTrendingContentResponse, error)
	mustEmbedUnimplementedContentServiceServer()
}

// UnimplementedContentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContentServiceServer struct {
}

func (UnimplementedContentServiceServer) CreateContent(context.Context, *CreateContentRequest) (*CreateContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContent not implemented")
}
func (UnimplementedContentServiceServer) UpdateContent(context.Context, *UpdateContentRequest) (*UpdateContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContent not implemented")
}
func (UnimplementedContentServiceServer) GetContent(context.Context, *GetContentRequest) (*GetContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContent not implemented")
}
func (UnimplementedContentServiceServer) DeleteContent(context.Context, *DeleteContentRequest) (*DeleteContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContent not implemented")
}
func (UnimplementedContentServiceServer) PublishContent(context.Context, *PublishContentRequest) (*PublishContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishContent not implemented")
}
func (UnimplementedContentServiceServer) ChangeContentStatus(context.Context, *ChangeContentStatusRequest) (*ChangeContentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeContentStatus not implemented")
}
func (UnimplementedContentServiceServer) GetUserContent(context.Context, *GetUserContentRequest) (*GetUserContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserContent not implemented")
}
func (UnimplementedContentServiceServer) GetContentStats(context.Context, *GetContentStatsRequest) (*GetContentStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContentStats not implemented")
}
func (UnimplementedContentServiceServer) CreateTag(context.Context, *CreateTagRequest) (*CreateTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedContentServiceServer) GetTags(context.Context, *GetTagsRequest) (*GetTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTags not implemented")
}
func (UnimplementedContentServiceServer) CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopic not implemented")
}
func (UnimplementedContentServiceServer) GetTopics(context.Context, *GetTopicsRequest) (*GetTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopics not implemented")
}
func (UnimplementedContentServiceServer) CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedContentServiceServer) DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedContentServiceServer) GetComments(context.Context, *GetCommentsRequest) (*GetCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComments not implemented")
}
func (UnimplementedContentServiceServer) GetCommentReplies(context.Context, *GetCommentRepliesRequest) (*GetCommentRepliesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentReplies not implemented")
}
func (UnimplementedContentServiceServer) DoInteraction(context.Context, *DoInteractionRequest) (*DoInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoInteraction not implemented")
}
func (UnimplementedContentServiceServer) UndoInteraction(context.Context, *UndoInteractionRequest) (*UndoInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndoInteraction not implemented")
}
func (UnimplementedContentServiceServer) CheckInteraction(context.Context, *CheckInteractionRequest) (*CheckInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckInteraction not implemented")
}
func (UnimplementedContentServiceServer) GetInteractionStats(context.Context, *GetInteractionStatsRequest) (*GetInteractionStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInteractionStats not implemented")
}
func (UnimplementedContentServiceServer) GetContentDetail(context.Context, *GetContentDetailRequest) (*GetContentDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContentDetail not implemented")
}
func (UnimplementedContentServiceServer) GetContentFeed(context.Context, *GetContentFeedRequest) (*GetContentFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContentFeed not implemented")
}
func (UnimplementedContentServiceServer) GetTrendingContent(context.Context, *GetTrendingContentRequest) (*GetTrendingContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrendingContent not implemented")
}
func (UnimplementedContentServiceServer) mustEmbedUnimplementedContentServiceServer() {}

// UnsafeContentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentServiceServer will
// result in compilation errors.
type UnsafeContentServiceServer interface {
	mustEmbedUnimplementedContentServiceServer()
}

func RegisterContentServiceServer(s grpc.ServiceRegistrar, srv ContentServiceServer) {
	s.RegisterService(&ContentService_ServiceDesc, srv)
}

func _ContentService_CreateContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CreateContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_CreateContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CreateContent(ctx, req.(*CreateContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_UpdateContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).UpdateContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_UpdateContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).UpdateContent(ctx, req.(*UpdateContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetContent(ctx, req.(*GetContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DeleteContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DeleteContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DeleteContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DeleteContent(ctx, req.(*DeleteContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_PublishContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).PublishContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_PublishContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).PublishContent(ctx, req.(*PublishContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_ChangeContentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeContentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).ChangeContentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_ChangeContentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).ChangeContentStatus(ctx, req.(*ChangeContentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetUserContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetUserContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetUserContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetUserContent(ctx, req.(*GetUserContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetContentStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContentStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetContentStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetContentStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetContentStats(ctx, req.(*GetContentStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_CreateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetTags(ctx, req.(*GetTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_CreateTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CreateTopic(ctx, req.(*CreateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetTopics(ctx, req.(*GetTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetComments(ctx, req.(*GetCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetCommentReplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentRepliesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetCommentReplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetCommentReplies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetCommentReplies(ctx, req.(*GetCommentRepliesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DoInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DoInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DoInteraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DoInteraction(ctx, req.(*DoInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_UndoInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndoInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).UndoInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_UndoInteraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).UndoInteraction(ctx, req.(*UndoInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_CheckInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CheckInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_CheckInteraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CheckInteraction(ctx, req.(*CheckInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetInteractionStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInteractionStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetInteractionStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetInteractionStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetInteractionStats(ctx, req.(*GetInteractionStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetContentDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContentDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetContentDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetContentDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetContentDetail(ctx, req.(*GetContentDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetContentFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContentFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetContentFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetContentFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetContentFeed(ctx, req.(*GetContentFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetTrendingContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrendingContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetTrendingContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetTrendingContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetTrendingContent(ctx, req.(*GetTrendingContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentService_ServiceDesc is the grpc.ServiceDesc for ContentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rest.ContentService",
	HandlerType: (*ContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateContent",
			Handler:    _ContentService_CreateContent_Handler,
		},
		{
			MethodName: "UpdateContent",
			Handler:    _ContentService_UpdateContent_Handler,
		},
		{
			MethodName: "GetContent",
			Handler:    _ContentService_GetContent_Handler,
		},
		{
			MethodName: "DeleteContent",
			Handler:    _ContentService_DeleteContent_Handler,
		},
		{
			MethodName: "PublishContent",
			Handler:    _ContentService_PublishContent_Handler,
		},
		{
			MethodName: "ChangeContentStatus",
			Handler:    _ContentService_ChangeContentStatus_Handler,
		},
		{
			MethodName: "GetUserContent",
			Handler:    _ContentService_GetUserContent_Handler,
		},
		{
			MethodName: "GetContentStats",
			Handler:    _ContentService_GetContentStats_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _ContentService_CreateTag_Handler,
		},
		{
			MethodName: "GetTags",
			Handler:    _ContentService_GetTags_Handler,
		},
		{
			MethodName: "CreateTopic",
			Handler:    _ContentService_CreateTopic_Handler,
		},
		{
			MethodName: "GetTopics",
			Handler:    _ContentService_GetTopics_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _ContentService_CreateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _ContentService_DeleteComment_Handler,
		},
		{
			MethodName: "GetComments",
			Handler:    _ContentService_GetComments_Handler,
		},
		{
			MethodName: "GetCommentReplies",
			Handler:    _ContentService_GetCommentReplies_Handler,
		},
		{
			MethodName: "DoInteraction",
			Handler:    _ContentService_DoInteraction_Handler,
		},
		{
			MethodName: "UndoInteraction",
			Handler:    _ContentService_UndoInteraction_Handler,
		},
		{
			MethodName: "CheckInteraction",
			Handler:    _ContentService_CheckInteraction_Handler,
		},
		{
			MethodName: "GetInteractionStats",
			Handler:    _ContentService_GetInteractionStats_Handler,
		},
		{
			MethodName: "GetContentDetail",
			Handler:    _ContentService_GetContentDetail_Handler,
		},
		{
			MethodName: "GetContentFeed",
			Handler:    _ContentService_GetContentFeed_Handler,
		},
		{
			MethodName: "GetTrendingContent",
			Handler:    _ContentService_GetTrendingContent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "content.proto",
}
