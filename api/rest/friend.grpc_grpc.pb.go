// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: friend.grpc.proto

package rest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FriendEventService_NotifyFriendEvent_FullMethodName = "/rest.FriendEventService/NotifyFriendEvent"
)

// FriendEventServiceClient is the client API for FriendEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendEventServiceClient interface {
	// 通知好友事件
	NotifyFriendEvent(ctx context.Context, in *NotifyFriendEventRequest, opts ...grpc.CallOption) (*NotifyFriendEventResponse, error)
}

type friendEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendEventServiceClient(cc grpc.ClientConnInterface) FriendEventServiceClient {
	return &friendEventServiceClient{cc}
}

func (c *friendEventServiceClient) NotifyFriendEvent(ctx context.Context, in *NotifyFriendEventRequest, opts ...grpc.CallOption) (*NotifyFriendEventResponse, error) {
	out := new(NotifyFriendEventResponse)
	err := c.cc.Invoke(ctx, FriendEventService_NotifyFriendEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendEventServiceServer is the server API for FriendEventService service.
// All implementations must embed UnimplementedFriendEventServiceServer
// for forward compatibility
type FriendEventServiceServer interface {
	// 通知好友事件
	NotifyFriendEvent(context.Context, *NotifyFriendEventRequest) (*NotifyFriendEventResponse, error)
	mustEmbedUnimplementedFriendEventServiceServer()
}

// UnimplementedFriendEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFriendEventServiceServer struct {
}

func (UnimplementedFriendEventServiceServer) NotifyFriendEvent(context.Context, *NotifyFriendEventRequest) (*NotifyFriendEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyFriendEvent not implemented")
}
func (UnimplementedFriendEventServiceServer) mustEmbedUnimplementedFriendEventServiceServer() {}

// UnsafeFriendEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendEventServiceServer will
// result in compilation errors.
type UnsafeFriendEventServiceServer interface {
	mustEmbedUnimplementedFriendEventServiceServer()
}

func RegisterFriendEventServiceServer(s grpc.ServiceRegistrar, srv FriendEventServiceServer) {
	s.RegisterService(&FriendEventService_ServiceDesc, srv)
}

func _FriendEventService_NotifyFriendEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyFriendEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendEventServiceServer).NotifyFriendEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendEventService_NotifyFriendEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendEventServiceServer).NotifyFriendEvent(ctx, req.(*NotifyFriendEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FriendEventService_ServiceDesc is the grpc.ServiceDesc for FriendEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rest.FriendEventService",
	HandlerType: (*FriendEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyFriendEvent",
			Handler:    _FriendEventService_NotifyFriendEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "friend.grpc.proto",
}
