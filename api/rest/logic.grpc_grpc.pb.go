// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: logic.grpc.proto

package rest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LogicService_SendMessage_FullMethodName      = "/rest.LogicService/SendMessage"
	LogicService_HandleMessageAck_FullMethodName = "/rest.LogicService/HandleMessageAck"
)

// LogicServiceClient is the client API for LogicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogicServiceClient interface {
	// 发送消息（支持单聊和群聊）
	SendMessage(ctx context.Context, in *SendLogicMessageRequest, opts ...grpc.CallOption) (*SendLogicMessageResponse, error)
	// 处理消息ACK
	HandleMessageAck(ctx context.Context, in *MessageAckRequest, opts ...grpc.CallOption) (*MessageAckResponse, error)
}

type logicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogicServiceClient(cc grpc.ClientConnInterface) LogicServiceClient {
	return &logicServiceClient{cc}
}

func (c *logicServiceClient) SendMessage(ctx context.Context, in *SendLogicMessageRequest, opts ...grpc.CallOption) (*SendLogicMessageResponse, error) {
	out := new(SendLogicMessageResponse)
	err := c.cc.Invoke(ctx, LogicService_SendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServiceClient) HandleMessageAck(ctx context.Context, in *MessageAckRequest, opts ...grpc.CallOption) (*MessageAckResponse, error) {
	out := new(MessageAckResponse)
	err := c.cc.Invoke(ctx, LogicService_HandleMessageAck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogicServiceServer is the server API for LogicService service.
// All implementations must embed UnimplementedLogicServiceServer
// for forward compatibility
type LogicServiceServer interface {
	// 发送消息（支持单聊和群聊）
	SendMessage(context.Context, *SendLogicMessageRequest) (*SendLogicMessageResponse, error)
	// 处理消息ACK
	HandleMessageAck(context.Context, *MessageAckRequest) (*MessageAckResponse, error)
	mustEmbedUnimplementedLogicServiceServer()
}

// UnimplementedLogicServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogicServiceServer struct {
}

func (UnimplementedLogicServiceServer) SendMessage(context.Context, *SendLogicMessageRequest) (*SendLogicMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedLogicServiceServer) HandleMessageAck(context.Context, *MessageAckRequest) (*MessageAckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMessageAck not implemented")
}
func (UnimplementedLogicServiceServer) mustEmbedUnimplementedLogicServiceServer() {}

// UnsafeLogicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogicServiceServer will
// result in compilation errors.
type UnsafeLogicServiceServer interface {
	mustEmbedUnimplementedLogicServiceServer()
}

func RegisterLogicServiceServer(s grpc.ServiceRegistrar, srv LogicServiceServer) {
	s.RegisterService(&LogicService_ServiceDesc, srv)
}

func _LogicService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendLogicMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogicService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServiceServer).SendMessage(ctx, req.(*SendLogicMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicService_HandleMessageAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServiceServer).HandleMessageAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogicService_HandleMessageAck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServiceServer).HandleMessageAck(ctx, req.(*MessageAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogicService_ServiceDesc is the grpc.ServiceDesc for LogicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rest.LogicService",
	HandlerType: (*LogicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _LogicService_SendMessage_Handler,
		},
		{
			MethodName: "HandleMessageAck",
			Handler:    _LogicService_HandleMessageAck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logic.grpc.proto",
}
