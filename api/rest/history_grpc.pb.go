// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: history.proto

package rest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HistoryService_CreateHistory_FullMethodName        = "/rest.HistoryService/CreateHistory"
	HistoryService_BatchCreateHistory_FullMethodName   = "/rest.HistoryService/BatchCreateHistory"
	HistoryService_GetUserHistory_FullMethodName       = "/rest.HistoryService/GetUserHistory"
	HistoryService_GetObjectHistory_FullMethodName     = "/rest.HistoryService/GetObjectHistory"
	HistoryService_DeleteHistory_FullMethodName        = "/rest.HistoryService/DeleteHistory"
	HistoryService_ClearUserHistory_FullMethodName     = "/rest.HistoryService/ClearUserHistory"
	HistoryService_GetUserActionStats_FullMethodName   = "/rest.HistoryService/GetUserActionStats"
	HistoryService_GetHotObjects_FullMethodName        = "/rest.HistoryService/GetHotObjects"
	HistoryService_GetUserActivityStats_FullMethodName = "/rest.HistoryService/GetUserActivityStats"
)

// HistoryServiceClient is the client API for HistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HistoryServiceClient interface {
	// 基础历史记录操作
	CreateHistory(ctx context.Context, in *CreateHistoryRequest, opts ...grpc.CallOption) (*CreateHistoryResponse, error)
	BatchCreateHistory(ctx context.Context, in *BatchCreateHistoryRequest, opts ...grpc.CallOption) (*BatchCreateHistoryResponse, error)
	GetUserHistory(ctx context.Context, in *GetUserHistoryRequest, opts ...grpc.CallOption) (*GetUserHistoryResponse, error)
	GetObjectHistory(ctx context.Context, in *GetObjectHistoryRequest, opts ...grpc.CallOption) (*GetObjectHistoryResponse, error)
	DeleteHistory(ctx context.Context, in *DeleteHistoryRequest, opts ...grpc.CallOption) (*DeleteHistoryResponse, error)
	ClearUserHistory(ctx context.Context, in *ClearUserHistoryRequest, opts ...grpc.CallOption) (*ClearUserHistoryResponse, error)
	// 统计分析
	GetUserActionStats(ctx context.Context, in *GetUserActionStatsRequest, opts ...grpc.CallOption) (*GetUserActionStatsResponse, error)
	GetHotObjects(ctx context.Context, in *GetHotObjectsRequest, opts ...grpc.CallOption) (*GetHotObjectsResponse, error)
	GetUserActivityStats(ctx context.Context, in *GetUserActivityStatsRequest, opts ...grpc.CallOption) (*GetUserActivityStatsResponse, error)
}

type historyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHistoryServiceClient(cc grpc.ClientConnInterface) HistoryServiceClient {
	return &historyServiceClient{cc}
}

func (c *historyServiceClient) CreateHistory(ctx context.Context, in *CreateHistoryRequest, opts ...grpc.CallOption) (*CreateHistoryResponse, error) {
	out := new(CreateHistoryResponse)
	err := c.cc.Invoke(ctx, HistoryService_CreateHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) BatchCreateHistory(ctx context.Context, in *BatchCreateHistoryRequest, opts ...grpc.CallOption) (*BatchCreateHistoryResponse, error) {
	out := new(BatchCreateHistoryResponse)
	err := c.cc.Invoke(ctx, HistoryService_BatchCreateHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) GetUserHistory(ctx context.Context, in *GetUserHistoryRequest, opts ...grpc.CallOption) (*GetUserHistoryResponse, error) {
	out := new(GetUserHistoryResponse)
	err := c.cc.Invoke(ctx, HistoryService_GetUserHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) GetObjectHistory(ctx context.Context, in *GetObjectHistoryRequest, opts ...grpc.CallOption) (*GetObjectHistoryResponse, error) {
	out := new(GetObjectHistoryResponse)
	err := c.cc.Invoke(ctx, HistoryService_GetObjectHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) DeleteHistory(ctx context.Context, in *DeleteHistoryRequest, opts ...grpc.CallOption) (*DeleteHistoryResponse, error) {
	out := new(DeleteHistoryResponse)
	err := c.cc.Invoke(ctx, HistoryService_DeleteHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) ClearUserHistory(ctx context.Context, in *ClearUserHistoryRequest, opts ...grpc.CallOption) (*ClearUserHistoryResponse, error) {
	out := new(ClearUserHistoryResponse)
	err := c.cc.Invoke(ctx, HistoryService_ClearUserHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) GetUserActionStats(ctx context.Context, in *GetUserActionStatsRequest, opts ...grpc.CallOption) (*GetUserActionStatsResponse, error) {
	out := new(GetUserActionStatsResponse)
	err := c.cc.Invoke(ctx, HistoryService_GetUserActionStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) GetHotObjects(ctx context.Context, in *GetHotObjectsRequest, opts ...grpc.CallOption) (*GetHotObjectsResponse, error) {
	out := new(GetHotObjectsResponse)
	err := c.cc.Invoke(ctx, HistoryService_GetHotObjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) GetUserActivityStats(ctx context.Context, in *GetUserActivityStatsRequest, opts ...grpc.CallOption) (*GetUserActivityStatsResponse, error) {
	out := new(GetUserActivityStatsResponse)
	err := c.cc.Invoke(ctx, HistoryService_GetUserActivityStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HistoryServiceServer is the server API for HistoryService service.
// All implementations must embed UnimplementedHistoryServiceServer
// for forward compatibility
type HistoryServiceServer interface {
	// 基础历史记录操作
	CreateHistory(context.Context, *CreateHistoryRequest) (*CreateHistoryResponse, error)
	BatchCreateHistory(context.Context, *BatchCreateHistoryRequest) (*BatchCreateHistoryResponse, error)
	GetUserHistory(context.Context, *GetUserHistoryRequest) (*GetUserHistoryResponse, error)
	GetObjectHistory(context.Context, *GetObjectHistoryRequest) (*GetObjectHistoryResponse, error)
	DeleteHistory(context.Context, *DeleteHistoryRequest) (*DeleteHistoryResponse, error)
	ClearUserHistory(context.Context, *ClearUserHistoryRequest) (*ClearUserHistoryResponse, error)
	// 统计分析
	GetUserActionStats(context.Context, *GetUserActionStatsRequest) (*GetUserActionStatsResponse, error)
	GetHotObjects(context.Context, *GetHotObjectsRequest) (*GetHotObjectsResponse, error)
	GetUserActivityStats(context.Context, *GetUserActivityStatsRequest) (*GetUserActivityStatsResponse, error)
	mustEmbedUnimplementedHistoryServiceServer()
}

// UnimplementedHistoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHistoryServiceServer struct {
}

func (UnimplementedHistoryServiceServer) CreateHistory(context.Context, *CreateHistoryRequest) (*CreateHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHistory not implemented")
}
func (UnimplementedHistoryServiceServer) BatchCreateHistory(context.Context, *BatchCreateHistoryRequest) (*BatchCreateHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateHistory not implemented")
}
func (UnimplementedHistoryServiceServer) GetUserHistory(context.Context, *GetUserHistoryRequest) (*GetUserHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserHistory not implemented")
}
func (UnimplementedHistoryServiceServer) GetObjectHistory(context.Context, *GetObjectHistoryRequest) (*GetObjectHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectHistory not implemented")
}
func (UnimplementedHistoryServiceServer) DeleteHistory(context.Context, *DeleteHistoryRequest) (*DeleteHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHistory not implemented")
}
func (UnimplementedHistoryServiceServer) ClearUserHistory(context.Context, *ClearUserHistoryRequest) (*ClearUserHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearUserHistory not implemented")
}
func (UnimplementedHistoryServiceServer) GetUserActionStats(context.Context, *GetUserActionStatsRequest) (*GetUserActionStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserActionStats not implemented")
}
func (UnimplementedHistoryServiceServer) GetHotObjects(context.Context, *GetHotObjectsRequest) (*GetHotObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotObjects not implemented")
}
func (UnimplementedHistoryServiceServer) GetUserActivityStats(context.Context, *GetUserActivityStatsRequest) (*GetUserActivityStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserActivityStats not implemented")
}
func (UnimplementedHistoryServiceServer) mustEmbedUnimplementedHistoryServiceServer() {}

// UnsafeHistoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HistoryServiceServer will
// result in compilation errors.
type UnsafeHistoryServiceServer interface {
	mustEmbedUnimplementedHistoryServiceServer()
}

func RegisterHistoryServiceServer(s grpc.ServiceRegistrar, srv HistoryServiceServer) {
	s.RegisterService(&HistoryService_ServiceDesc, srv)
}

func _HistoryService_CreateHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).CreateHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryService_CreateHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).CreateHistory(ctx, req.(*CreateHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_BatchCreateHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).BatchCreateHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryService_BatchCreateHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).BatchCreateHistory(ctx, req.(*BatchCreateHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_GetUserHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).GetUserHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryService_GetUserHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).GetUserHistory(ctx, req.(*GetUserHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_GetObjectHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).GetObjectHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryService_GetObjectHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).GetObjectHistory(ctx, req.(*GetObjectHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_DeleteHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).DeleteHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryService_DeleteHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).DeleteHistory(ctx, req.(*DeleteHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_ClearUserHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearUserHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).ClearUserHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryService_ClearUserHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).ClearUserHistory(ctx, req.(*ClearUserHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_GetUserActionStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserActionStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).GetUserActionStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryService_GetUserActionStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).GetUserActionStats(ctx, req.(*GetUserActionStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_GetHotObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).GetHotObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryService_GetHotObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).GetHotObjects(ctx, req.(*GetHotObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_GetUserActivityStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserActivityStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).GetUserActivityStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryService_GetUserActivityStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).GetUserActivityStats(ctx, req.(*GetUserActivityStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HistoryService_ServiceDesc is the grpc.ServiceDesc for HistoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HistoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rest.HistoryService",
	HandlerType: (*HistoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHistory",
			Handler:    _HistoryService_CreateHistory_Handler,
		},
		{
			MethodName: "BatchCreateHistory",
			Handler:    _HistoryService_BatchCreateHistory_Handler,
		},
		{
			MethodName: "GetUserHistory",
			Handler:    _HistoryService_GetUserHistory_Handler,
		},
		{
			MethodName: "GetObjectHistory",
			Handler:    _HistoryService_GetObjectHistory_Handler,
		},
		{
			MethodName: "DeleteHistory",
			Handler:    _HistoryService_DeleteHistory_Handler,
		},
		{
			MethodName: "ClearUserHistory",
			Handler:    _HistoryService_ClearUserHistory_Handler,
		},
		{
			MethodName: "GetUserActionStats",
			Handler:    _HistoryService_GetUserActionStats_Handler,
		},
		{
			MethodName: "GetHotObjects",
			Handler:    _HistoryService_GetHotObjects_Handler,
		},
		{
			MethodName: "GetUserActivityStats",
			Handler:    _HistoryService_GetUserActivityStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "history.proto",
}
