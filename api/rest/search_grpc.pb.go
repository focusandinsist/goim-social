// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: search.proto

package rest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SearchService_Search_FullMethodName                     = "/rest.SearchService/Search"
	SearchService_SearchContent_FullMethodName              = "/rest.SearchService/SearchContent"
	SearchService_SearchUsers_FullMethodName                = "/rest.SearchService/SearchUsers"
	SearchService_SearchMessages_FullMethodName             = "/rest.SearchService/SearchMessages"
	SearchService_SearchGroups_FullMethodName               = "/rest.SearchService/SearchGroups"
	SearchService_MultiSearch_FullMethodName                = "/rest.SearchService/MultiSearch"
	SearchService_GetSuggestions_FullMethodName             = "/rest.SearchService/GetSuggestions"
	SearchService_GetAutoComplete_FullMethodName            = "/rest.SearchService/GetAutoComplete"
	SearchService_GetHotSearches_FullMethodName             = "/rest.SearchService/GetHotSearches"
	SearchService_GetSearchHistory_FullMethodName           = "/rest.SearchService/GetSearchHistory"
	SearchService_ClearSearchHistory_FullMethodName         = "/rest.SearchService/ClearSearchHistory"
	SearchService_DeleteSearchHistoryItem_FullMethodName    = "/rest.SearchService/DeleteSearchHistoryItem"
	SearchService_GetUserSearchPreference_FullMethodName    = "/rest.SearchService/GetUserSearchPreference"
	SearchService_UpdateUserSearchPreference_FullMethodName = "/rest.SearchService/UpdateUserSearchPreference"
)

// SearchServiceClient is the client API for SearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchServiceClient interface {
	// 通用搜索
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// 内容搜索
	SearchContent(ctx context.Context, in *SearchContentRequest, opts ...grpc.CallOption) (*SearchContentResponse, error)
	// 用户搜索
	SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error)
	// 消息搜索
	SearchMessages(ctx context.Context, in *SearchMessagesRequest, opts ...grpc.CallOption) (*SearchMessagesResponse, error)
	// 群组搜索
	SearchGroups(ctx context.Context, in *SearchGroupsRequest, opts ...grpc.CallOption) (*SearchGroupsResponse, error)
	// 多类型搜索
	MultiSearch(ctx context.Context, in *MultiSearchRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error)
	// 获取搜索建议
	GetSuggestions(ctx context.Context, in *GetSuggestionsRequest, opts ...grpc.CallOption) (*GetSuggestionsResponse, error)
	// 获取自动完成
	GetAutoComplete(ctx context.Context, in *GetAutoCompleteRequest, opts ...grpc.CallOption) (*GetAutoCompleteResponse, error)
	// 获取热门搜索
	GetHotSearches(ctx context.Context, in *GetHotSearchesRequest, opts ...grpc.CallOption) (*GetHotSearchesResponse, error)
	// 获取搜索历史
	GetSearchHistory(ctx context.Context, in *GetSearchHistoryRequest, opts ...grpc.CallOption) (*GetSearchHistoryResponse, error)
	// 清空搜索历史
	ClearSearchHistory(ctx context.Context, in *ClearSearchHistoryRequest, opts ...grpc.CallOption) (*ClearSearchHistoryResponse, error)
	// 删除搜索历史项
	DeleteSearchHistoryItem(ctx context.Context, in *DeleteSearchHistoryItemRequest, opts ...grpc.CallOption) (*DeleteSearchHistoryItemResponse, error)
	// 获取用户搜索偏好
	GetUserSearchPreference(ctx context.Context, in *GetUserSearchPreferenceRequest, opts ...grpc.CallOption) (*GetUserSearchPreferenceResponse, error)
	// 更新用户搜索偏好
	UpdateUserSearchPreference(ctx context.Context, in *UpdateUserSearchPreferenceRequest, opts ...grpc.CallOption) (*UpdateUserSearchPreferenceResponse, error)
}

type searchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchServiceClient(cc grpc.ClientConnInterface) SearchServiceClient {
	return &searchServiceClient{cc}
}

func (c *searchServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, SearchService_Search_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) SearchContent(ctx context.Context, in *SearchContentRequest, opts ...grpc.CallOption) (*SearchContentResponse, error) {
	out := new(SearchContentResponse)
	err := c.cc.Invoke(ctx, SearchService_SearchContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error) {
	out := new(SearchUsersResponse)
	err := c.cc.Invoke(ctx, SearchService_SearchUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) SearchMessages(ctx context.Context, in *SearchMessagesRequest, opts ...grpc.CallOption) (*SearchMessagesResponse, error) {
	out := new(SearchMessagesResponse)
	err := c.cc.Invoke(ctx, SearchService_SearchMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) SearchGroups(ctx context.Context, in *SearchGroupsRequest, opts ...grpc.CallOption) (*SearchGroupsResponse, error) {
	out := new(SearchGroupsResponse)
	err := c.cc.Invoke(ctx, SearchService_SearchGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) MultiSearch(ctx context.Context, in *MultiSearchRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error) {
	out := new(MultiSearchResponse)
	err := c.cc.Invoke(ctx, SearchService_MultiSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) GetSuggestions(ctx context.Context, in *GetSuggestionsRequest, opts ...grpc.CallOption) (*GetSuggestionsResponse, error) {
	out := new(GetSuggestionsResponse)
	err := c.cc.Invoke(ctx, SearchService_GetSuggestions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) GetAutoComplete(ctx context.Context, in *GetAutoCompleteRequest, opts ...grpc.CallOption) (*GetAutoCompleteResponse, error) {
	out := new(GetAutoCompleteResponse)
	err := c.cc.Invoke(ctx, SearchService_GetAutoComplete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) GetHotSearches(ctx context.Context, in *GetHotSearchesRequest, opts ...grpc.CallOption) (*GetHotSearchesResponse, error) {
	out := new(GetHotSearchesResponse)
	err := c.cc.Invoke(ctx, SearchService_GetHotSearches_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) GetSearchHistory(ctx context.Context, in *GetSearchHistoryRequest, opts ...grpc.CallOption) (*GetSearchHistoryResponse, error) {
	out := new(GetSearchHistoryResponse)
	err := c.cc.Invoke(ctx, SearchService_GetSearchHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) ClearSearchHistory(ctx context.Context, in *ClearSearchHistoryRequest, opts ...grpc.CallOption) (*ClearSearchHistoryResponse, error) {
	out := new(ClearSearchHistoryResponse)
	err := c.cc.Invoke(ctx, SearchService_ClearSearchHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) DeleteSearchHistoryItem(ctx context.Context, in *DeleteSearchHistoryItemRequest, opts ...grpc.CallOption) (*DeleteSearchHistoryItemResponse, error) {
	out := new(DeleteSearchHistoryItemResponse)
	err := c.cc.Invoke(ctx, SearchService_DeleteSearchHistoryItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) GetUserSearchPreference(ctx context.Context, in *GetUserSearchPreferenceRequest, opts ...grpc.CallOption) (*GetUserSearchPreferenceResponse, error) {
	out := new(GetUserSearchPreferenceResponse)
	err := c.cc.Invoke(ctx, SearchService_GetUserSearchPreference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) UpdateUserSearchPreference(ctx context.Context, in *UpdateUserSearchPreferenceRequest, opts ...grpc.CallOption) (*UpdateUserSearchPreferenceResponse, error) {
	out := new(UpdateUserSearchPreferenceResponse)
	err := c.cc.Invoke(ctx, SearchService_UpdateUserSearchPreference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchServiceServer is the server API for SearchService service.
// All implementations must embed UnimplementedSearchServiceServer
// for forward compatibility
type SearchServiceServer interface {
	// 通用搜索
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// 内容搜索
	SearchContent(context.Context, *SearchContentRequest) (*SearchContentResponse, error)
	// 用户搜索
	SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error)
	// 消息搜索
	SearchMessages(context.Context, *SearchMessagesRequest) (*SearchMessagesResponse, error)
	// 群组搜索
	SearchGroups(context.Context, *SearchGroupsRequest) (*SearchGroupsResponse, error)
	// 多类型搜索
	MultiSearch(context.Context, *MultiSearchRequest) (*MultiSearchResponse, error)
	// 获取搜索建议
	GetSuggestions(context.Context, *GetSuggestionsRequest) (*GetSuggestionsResponse, error)
	// 获取自动完成
	GetAutoComplete(context.Context, *GetAutoCompleteRequest) (*GetAutoCompleteResponse, error)
	// 获取热门搜索
	GetHotSearches(context.Context, *GetHotSearchesRequest) (*GetHotSearchesResponse, error)
	// 获取搜索历史
	GetSearchHistory(context.Context, *GetSearchHistoryRequest) (*GetSearchHistoryResponse, error)
	// 清空搜索历史
	ClearSearchHistory(context.Context, *ClearSearchHistoryRequest) (*ClearSearchHistoryResponse, error)
	// 删除搜索历史项
	DeleteSearchHistoryItem(context.Context, *DeleteSearchHistoryItemRequest) (*DeleteSearchHistoryItemResponse, error)
	// 获取用户搜索偏好
	GetUserSearchPreference(context.Context, *GetUserSearchPreferenceRequest) (*GetUserSearchPreferenceResponse, error)
	// 更新用户搜索偏好
	UpdateUserSearchPreference(context.Context, *UpdateUserSearchPreferenceRequest) (*UpdateUserSearchPreferenceResponse, error)
	mustEmbedUnimplementedSearchServiceServer()
}

// UnimplementedSearchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSearchServiceServer struct {
}

func (UnimplementedSearchServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedSearchServiceServer) SearchContent(context.Context, *SearchContentRequest) (*SearchContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchContent not implemented")
}
func (UnimplementedSearchServiceServer) SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUsers not implemented")
}
func (UnimplementedSearchServiceServer) SearchMessages(context.Context, *SearchMessagesRequest) (*SearchMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMessages not implemented")
}
func (UnimplementedSearchServiceServer) SearchGroups(context.Context, *SearchGroupsRequest) (*SearchGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGroups not implemented")
}
func (UnimplementedSearchServiceServer) MultiSearch(context.Context, *MultiSearchRequest) (*MultiSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiSearch not implemented")
}
func (UnimplementedSearchServiceServer) GetSuggestions(context.Context, *GetSuggestionsRequest) (*GetSuggestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuggestions not implemented")
}
func (UnimplementedSearchServiceServer) GetAutoComplete(context.Context, *GetAutoCompleteRequest) (*GetAutoCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAutoComplete not implemented")
}
func (UnimplementedSearchServiceServer) GetHotSearches(context.Context, *GetHotSearchesRequest) (*GetHotSearchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotSearches not implemented")
}
func (UnimplementedSearchServiceServer) GetSearchHistory(context.Context, *GetSearchHistoryRequest) (*GetSearchHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSearchHistory not implemented")
}
func (UnimplementedSearchServiceServer) ClearSearchHistory(context.Context, *ClearSearchHistoryRequest) (*ClearSearchHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearSearchHistory not implemented")
}
func (UnimplementedSearchServiceServer) DeleteSearchHistoryItem(context.Context, *DeleteSearchHistoryItemRequest) (*DeleteSearchHistoryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSearchHistoryItem not implemented")
}
func (UnimplementedSearchServiceServer) GetUserSearchPreference(context.Context, *GetUserSearchPreferenceRequest) (*GetUserSearchPreferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSearchPreference not implemented")
}
func (UnimplementedSearchServiceServer) UpdateUserSearchPreference(context.Context, *UpdateUserSearchPreferenceRequest) (*UpdateUserSearchPreferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserSearchPreference not implemented")
}
func (UnimplementedSearchServiceServer) mustEmbedUnimplementedSearchServiceServer() {}

// UnsafeSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchServiceServer will
// result in compilation errors.
type UnsafeSearchServiceServer interface {
	mustEmbedUnimplementedSearchServiceServer()
}

func RegisterSearchServiceServer(s grpc.ServiceRegistrar, srv SearchServiceServer) {
	s.RegisterService(&SearchService_ServiceDesc, srv)
}

func _SearchService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_SearchContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).SearchContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_SearchContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).SearchContent(ctx, req.(*SearchContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_SearchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).SearchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_SearchUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).SearchUsers(ctx, req.(*SearchUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_SearchMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).SearchMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_SearchMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).SearchMessages(ctx, req.(*SearchMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_SearchGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).SearchGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_SearchGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).SearchGroups(ctx, req.(*SearchGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_MultiSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).MultiSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_MultiSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).MultiSearch(ctx, req.(*MultiSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_GetSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuggestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).GetSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_GetSuggestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).GetSuggestions(ctx, req.(*GetSuggestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_GetAutoComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAutoCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).GetAutoComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_GetAutoComplete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).GetAutoComplete(ctx, req.(*GetAutoCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_GetHotSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).GetHotSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_GetHotSearches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).GetHotSearches(ctx, req.(*GetHotSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_GetSearchHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSearchHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).GetSearchHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_GetSearchHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).GetSearchHistory(ctx, req.(*GetSearchHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_ClearSearchHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearSearchHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).ClearSearchHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_ClearSearchHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).ClearSearchHistory(ctx, req.(*ClearSearchHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_DeleteSearchHistoryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSearchHistoryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).DeleteSearchHistoryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_DeleteSearchHistoryItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).DeleteSearchHistoryItem(ctx, req.(*DeleteSearchHistoryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_GetUserSearchPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSearchPreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).GetUserSearchPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_GetUserSearchPreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).GetUserSearchPreference(ctx, req.(*GetUserSearchPreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_UpdateUserSearchPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserSearchPreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).UpdateUserSearchPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_UpdateUserSearchPreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).UpdateUserSearchPreference(ctx, req.(*UpdateUserSearchPreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchService_ServiceDesc is the grpc.ServiceDesc for SearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rest.SearchService",
	HandlerType: (*SearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _SearchService_Search_Handler,
		},
		{
			MethodName: "SearchContent",
			Handler:    _SearchService_SearchContent_Handler,
		},
		{
			MethodName: "SearchUsers",
			Handler:    _SearchService_SearchUsers_Handler,
		},
		{
			MethodName: "SearchMessages",
			Handler:    _SearchService_SearchMessages_Handler,
		},
		{
			MethodName: "SearchGroups",
			Handler:    _SearchService_SearchGroups_Handler,
		},
		{
			MethodName: "MultiSearch",
			Handler:    _SearchService_MultiSearch_Handler,
		},
		{
			MethodName: "GetSuggestions",
			Handler:    _SearchService_GetSuggestions_Handler,
		},
		{
			MethodName: "GetAutoComplete",
			Handler:    _SearchService_GetAutoComplete_Handler,
		},
		{
			MethodName: "GetHotSearches",
			Handler:    _SearchService_GetHotSearches_Handler,
		},
		{
			MethodName: "GetSearchHistory",
			Handler:    _SearchService_GetSearchHistory_Handler,
		},
		{
			MethodName: "ClearSearchHistory",
			Handler:    _SearchService_ClearSearchHistory_Handler,
		},
		{
			MethodName: "DeleteSearchHistoryItem",
			Handler:    _SearchService_DeleteSearchHistoryItem_Handler,
		},
		{
			MethodName: "GetUserSearchPreference",
			Handler:    _SearchService_GetUserSearchPreference_Handler,
		},
		{
			MethodName: "UpdateUserSearchPreference",
			Handler:    _SearchService_UpdateUserSearchPreference_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "search.proto",
}

const (
	IndexService_CreateIndex_FullMethodName        = "/rest.IndexService/CreateIndex"
	IndexService_DeleteIndex_FullMethodName        = "/rest.IndexService/DeleteIndex"
	IndexService_ReindexAll_FullMethodName         = "/rest.IndexService/ReindexAll"
	IndexService_ReindexByType_FullMethodName      = "/rest.IndexService/ReindexByType"
	IndexService_IndexDocument_FullMethodName      = "/rest.IndexService/IndexDocument"
	IndexService_UpdateDocument_FullMethodName     = "/rest.IndexService/UpdateDocument"
	IndexService_DeleteDocument_FullMethodName     = "/rest.IndexService/DeleteDocument"
	IndexService_BulkIndexDocuments_FullMethodName = "/rest.IndexService/BulkIndexDocuments"
	IndexService_SyncFromDatabase_FullMethodName   = "/rest.IndexService/SyncFromDatabase"
	IndexService_GetSyncStatus_FullMethodName      = "/rest.IndexService/GetSyncStatus"
	IndexService_HealthCheck_FullMethodName        = "/rest.IndexService/HealthCheck"
	IndexService_GetClusterInfo_FullMethodName     = "/rest.IndexService/GetClusterInfo"
)

// IndexServiceClient is the client API for IndexService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndexServiceClient interface {
	// 创建索引
	CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...grpc.CallOption) (*CreateIndexResponse, error)
	// 删除索引
	DeleteIndex(ctx context.Context, in *DeleteIndexRequest, opts ...grpc.CallOption) (*DeleteIndexResponse, error)
	// 重建索引
	ReindexAll(ctx context.Context, in *ReindexAllRequest, opts ...grpc.CallOption) (*ReindexAllResponse, error)
	// 按类型重建索引
	ReindexByType(ctx context.Context, in *ReindexByTypeRequest, opts ...grpc.CallOption) (*ReindexByTypeResponse, error)
	// 索引文档
	IndexDocument(ctx context.Context, in *IndexDocumentRequest, opts ...grpc.CallOption) (*IndexDocumentResponse, error)
	// 更新文档
	UpdateDocument(ctx context.Context, in *UpdateDocumentRequest, opts ...grpc.CallOption) (*UpdateDocumentResponse, error)
	// 删除文档
	DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*DeleteDocumentResponse, error)
	// 批量索引文档
	BulkIndexDocuments(ctx context.Context, in *BulkIndexDocumentsRequest, opts ...grpc.CallOption) (*BulkIndexDocumentsResponse, error)
	// 从数据库同步
	SyncFromDatabase(ctx context.Context, in *SyncFromDatabaseRequest, opts ...grpc.CallOption) (*SyncFromDatabaseResponse, error)
	// 获取同步状态
	GetSyncStatus(ctx context.Context, in *GetSyncStatusRequest, opts ...grpc.CallOption) (*GetSyncStatusResponse, error)
	// 健康检查
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// 获取集群信息
	GetClusterInfo(ctx context.Context, in *GetClusterInfoRequest, opts ...grpc.CallOption) (*GetClusterInfoResponse, error)
}

type indexServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexServiceClient(cc grpc.ClientConnInterface) IndexServiceClient {
	return &indexServiceClient{cc}
}

func (c *indexServiceClient) CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...grpc.CallOption) (*CreateIndexResponse, error) {
	out := new(CreateIndexResponse)
	err := c.cc.Invoke(ctx, IndexService_CreateIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) DeleteIndex(ctx context.Context, in *DeleteIndexRequest, opts ...grpc.CallOption) (*DeleteIndexResponse, error) {
	out := new(DeleteIndexResponse)
	err := c.cc.Invoke(ctx, IndexService_DeleteIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) ReindexAll(ctx context.Context, in *ReindexAllRequest, opts ...grpc.CallOption) (*ReindexAllResponse, error) {
	out := new(ReindexAllResponse)
	err := c.cc.Invoke(ctx, IndexService_ReindexAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) ReindexByType(ctx context.Context, in *ReindexByTypeRequest, opts ...grpc.CallOption) (*ReindexByTypeResponse, error) {
	out := new(ReindexByTypeResponse)
	err := c.cc.Invoke(ctx, IndexService_ReindexByType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) IndexDocument(ctx context.Context, in *IndexDocumentRequest, opts ...grpc.CallOption) (*IndexDocumentResponse, error) {
	out := new(IndexDocumentResponse)
	err := c.cc.Invoke(ctx, IndexService_IndexDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) UpdateDocument(ctx context.Context, in *UpdateDocumentRequest, opts ...grpc.CallOption) (*UpdateDocumentResponse, error) {
	out := new(UpdateDocumentResponse)
	err := c.cc.Invoke(ctx, IndexService_UpdateDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*DeleteDocumentResponse, error) {
	out := new(DeleteDocumentResponse)
	err := c.cc.Invoke(ctx, IndexService_DeleteDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) BulkIndexDocuments(ctx context.Context, in *BulkIndexDocumentsRequest, opts ...grpc.CallOption) (*BulkIndexDocumentsResponse, error) {
	out := new(BulkIndexDocumentsResponse)
	err := c.cc.Invoke(ctx, IndexService_BulkIndexDocuments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) SyncFromDatabase(ctx context.Context, in *SyncFromDatabaseRequest, opts ...grpc.CallOption) (*SyncFromDatabaseResponse, error) {
	out := new(SyncFromDatabaseResponse)
	err := c.cc.Invoke(ctx, IndexService_SyncFromDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) GetSyncStatus(ctx context.Context, in *GetSyncStatusRequest, opts ...grpc.CallOption) (*GetSyncStatusResponse, error) {
	out := new(GetSyncStatusResponse)
	err := c.cc.Invoke(ctx, IndexService_GetSyncStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, IndexService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) GetClusterInfo(ctx context.Context, in *GetClusterInfoRequest, opts ...grpc.CallOption) (*GetClusterInfoResponse, error) {
	out := new(GetClusterInfoResponse)
	err := c.cc.Invoke(ctx, IndexService_GetClusterInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexServiceServer is the server API for IndexService service.
// All implementations must embed UnimplementedIndexServiceServer
// for forward compatibility
type IndexServiceServer interface {
	// 创建索引
	CreateIndex(context.Context, *CreateIndexRequest) (*CreateIndexResponse, error)
	// 删除索引
	DeleteIndex(context.Context, *DeleteIndexRequest) (*DeleteIndexResponse, error)
	// 重建索引
	ReindexAll(context.Context, *ReindexAllRequest) (*ReindexAllResponse, error)
	// 按类型重建索引
	ReindexByType(context.Context, *ReindexByTypeRequest) (*ReindexByTypeResponse, error)
	// 索引文档
	IndexDocument(context.Context, *IndexDocumentRequest) (*IndexDocumentResponse, error)
	// 更新文档
	UpdateDocument(context.Context, *UpdateDocumentRequest) (*UpdateDocumentResponse, error)
	// 删除文档
	DeleteDocument(context.Context, *DeleteDocumentRequest) (*DeleteDocumentResponse, error)
	// 批量索引文档
	BulkIndexDocuments(context.Context, *BulkIndexDocumentsRequest) (*BulkIndexDocumentsResponse, error)
	// 从数据库同步
	SyncFromDatabase(context.Context, *SyncFromDatabaseRequest) (*SyncFromDatabaseResponse, error)
	// 获取同步状态
	GetSyncStatus(context.Context, *GetSyncStatusRequest) (*GetSyncStatusResponse, error)
	// 健康检查
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// 获取集群信息
	GetClusterInfo(context.Context, *GetClusterInfoRequest) (*GetClusterInfoResponse, error)
	mustEmbedUnimplementedIndexServiceServer()
}

// UnimplementedIndexServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIndexServiceServer struct {
}

func (UnimplementedIndexServiceServer) CreateIndex(context.Context, *CreateIndexRequest) (*CreateIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndex not implemented")
}
func (UnimplementedIndexServiceServer) DeleteIndex(context.Context, *DeleteIndexRequest) (*DeleteIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIndex not implemented")
}
func (UnimplementedIndexServiceServer) ReindexAll(context.Context, *ReindexAllRequest) (*ReindexAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReindexAll not implemented")
}
func (UnimplementedIndexServiceServer) ReindexByType(context.Context, *ReindexByTypeRequest) (*ReindexByTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReindexByType not implemented")
}
func (UnimplementedIndexServiceServer) IndexDocument(context.Context, *IndexDocumentRequest) (*IndexDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexDocument not implemented")
}
func (UnimplementedIndexServiceServer) UpdateDocument(context.Context, *UpdateDocumentRequest) (*UpdateDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocument not implemented")
}
func (UnimplementedIndexServiceServer) DeleteDocument(context.Context, *DeleteDocumentRequest) (*DeleteDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocument not implemented")
}
func (UnimplementedIndexServiceServer) BulkIndexDocuments(context.Context, *BulkIndexDocumentsRequest) (*BulkIndexDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkIndexDocuments not implemented")
}
func (UnimplementedIndexServiceServer) SyncFromDatabase(context.Context, *SyncFromDatabaseRequest) (*SyncFromDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncFromDatabase not implemented")
}
func (UnimplementedIndexServiceServer) GetSyncStatus(context.Context, *GetSyncStatusRequest) (*GetSyncStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncStatus not implemented")
}
func (UnimplementedIndexServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedIndexServiceServer) GetClusterInfo(context.Context, *GetClusterInfoRequest) (*GetClusterInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterInfo not implemented")
}
func (UnimplementedIndexServiceServer) mustEmbedUnimplementedIndexServiceServer() {}

// UnsafeIndexServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexServiceServer will
// result in compilation errors.
type UnsafeIndexServiceServer interface {
	mustEmbedUnimplementedIndexServiceServer()
}

func RegisterIndexServiceServer(s grpc.ServiceRegistrar, srv IndexServiceServer) {
	s.RegisterService(&IndexService_ServiceDesc, srv)
}

func _IndexService_CreateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).CreateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_CreateIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).CreateIndex(ctx, req.(*CreateIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_DeleteIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).DeleteIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_DeleteIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).DeleteIndex(ctx, req.(*DeleteIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_ReindexAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReindexAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).ReindexAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_ReindexAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).ReindexAll(ctx, req.(*ReindexAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_ReindexByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReindexByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).ReindexByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_ReindexByType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).ReindexByType(ctx, req.(*ReindexByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_IndexDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).IndexDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_IndexDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).IndexDocument(ctx, req.(*IndexDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_UpdateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).UpdateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_UpdateDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).UpdateDocument(ctx, req.(*UpdateDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_DeleteDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).DeleteDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_DeleteDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).DeleteDocument(ctx, req.(*DeleteDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_BulkIndexDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkIndexDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).BulkIndexDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_BulkIndexDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).BulkIndexDocuments(ctx, req.(*BulkIndexDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_SyncFromDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncFromDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).SyncFromDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_SyncFromDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).SyncFromDatabase(ctx, req.(*SyncFromDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_GetSyncStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSyncStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).GetSyncStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_GetSyncStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).GetSyncStatus(ctx, req.(*GetSyncStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_GetClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).GetClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_GetClusterInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).GetClusterInfo(ctx, req.(*GetClusterInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IndexService_ServiceDesc is the grpc.ServiceDesc for IndexService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndexService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rest.IndexService",
	HandlerType: (*IndexServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIndex",
			Handler:    _IndexService_CreateIndex_Handler,
		},
		{
			MethodName: "DeleteIndex",
			Handler:    _IndexService_DeleteIndex_Handler,
		},
		{
			MethodName: "ReindexAll",
			Handler:    _IndexService_ReindexAll_Handler,
		},
		{
			MethodName: "ReindexByType",
			Handler:    _IndexService_ReindexByType_Handler,
		},
		{
			MethodName: "IndexDocument",
			Handler:    _IndexService_IndexDocument_Handler,
		},
		{
			MethodName: "UpdateDocument",
			Handler:    _IndexService_UpdateDocument_Handler,
		},
		{
			MethodName: "DeleteDocument",
			Handler:    _IndexService_DeleteDocument_Handler,
		},
		{
			MethodName: "BulkIndexDocuments",
			Handler:    _IndexService_BulkIndexDocuments_Handler,
		},
		{
			MethodName: "SyncFromDatabase",
			Handler:    _IndexService_SyncFromDatabase_Handler,
		},
		{
			MethodName: "GetSyncStatus",
			Handler:    _IndexService_GetSyncStatus_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _IndexService_HealthCheck_Handler,
		},
		{
			MethodName: "GetClusterInfo",
			Handler:    _IndexService_GetClusterInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "search.proto",
}
