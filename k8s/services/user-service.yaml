apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: im-system
  labels:
    app: user-service
    app.kubernetes.io/name: user-service
    app.kubernetes.io/component: microservice
    app.kubernetes.io/part-of: instant-messaging
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
        app.kubernetes.io/name: user-service
        app.kubernetes.io/component: microservice
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: im-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: user-service
        image: localhost:5000/im-user-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 21001
          name: http
          protocol: TCP
        - containerPort: 22001
          name: grpc
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: SERVICE_NAME
          value: "user-service"
        - name: HTTP_PORT
          value: "21001"
        - name: GRPC_PORT
          value: "22001"
        - name: METRICS_PORT
          value: "9090"
        - name: POSTGRESQL_HOST
          valueFrom:
            configMapKeyRef:
              name: im-config
              key: POSTGRESQL_HOST
        - name: POSTGRESQL_PORT
          valueFrom:
            configMapKeyRef:
              name: im-config
              key: POSTGRESQL_PORT
        - name: POSTGRESQL_DB
          valueFrom:
            configMapKeyRef:
              name: im-config
              key: POSTGRESQL_DB
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              name: im-secrets
              key: POSTGRESQL_USER
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: im-secrets
              key: POSTGRESQL_PASSWORD
        - name: REDIS_ADDR
          valueFrom:
            configMapKeyRef:
              name: im-config
              key: REDIS_ADDR
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: im-secrets
              key: REDIS_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: im-secrets
              key: JWT_SECRET
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: im-config
              key: LOG_LEVEL
        - name: LOG_FORMAT
          valueFrom:
            configMapKeyRef:
              name: im-config
              key: LOG_FORMAT
        volumeMounts:
        - name: config-volume
          mountPath: /app/configs
          readOnly: true
        - name: logs-volume
          mountPath: /app/logs
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
      volumes:
      - name: config-volume
        configMap:
          name: im-config
      - name: logs-volume
        emptyDir: {}
      initContainers:
      - name: wait-for-db
        image: postgres:15-alpine
        command:
        - sh
        - -c
        - |
          until pg_isready -h $POSTGRESQL_HOST -p $POSTGRESQL_PORT -U $POSTGRESQL_USER; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
        env:
        - name: POSTGRESQL_HOST
          valueFrom:
            configMapKeyRef:
              name: im-config
              key: POSTGRESQL_HOST
        - name: POSTGRESQL_PORT
          valueFrom:
            configMapKeyRef:
              name: im-config
              key: POSTGRESQL_PORT
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              name: im-secrets
              key: POSTGRESQL_USER
      - name: wait-for-redis
        image: redis:7-alpine
        command:
        - sh
        - -c
        - |
          until redis-cli -h $REDIS_HOST -p $REDIS_PORT -a $REDIS_PASSWORD ping; do
            echo "Waiting for Redis..."
            sleep 2
          done
          echo "Redis is ready!"
        env:
        - name: REDIS_HOST
          value: "redis.im-system.svc.cluster.local"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: im-secrets
              key: REDIS_PASSWORD

---
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: im-system
  labels:
    app: user-service
    app.kubernetes.io/name: user-service
    app.kubernetes.io/component: microservice
    app.kubernetes.io/part-of: instant-messaging
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  - port: 22001
    targetPort: grpc
    protocol: TCP
    name: grpc
  - port: 9090
    targetPort: metrics
    protocol: TCP
    name: metrics
  selector:
    app: user-service

---
# 水平Pod自动扩缩容
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: user-service-hpa
  namespace: im-system
  labels:
    app: user-service
    app.kubernetes.io/name: user-service-hpa
    app.kubernetes.io/component: autoscaling
    app.kubernetes.io/part-of: instant-messaging
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: user-service
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# Pod中断预算
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: user-service-pdb
  namespace: im-system
  labels:
    app: user-service
    app.kubernetes.io/name: user-service-pdb
    app.kubernetes.io/component: availability
    app.kubernetes.io/part-of: instant-messaging
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: user-service

---
# 服务监控
apiVersion: v1
kind: ServiceMonitor
metadata:
  name: user-service-monitor
  namespace: im-system
  labels:
    app: user-service
    app.kubernetes.io/name: user-service-monitor
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: instant-messaging
spec:
  selector:
    matchLabels:
      app: user-service
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
