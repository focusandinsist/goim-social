apiVersion: apps/v1
kind: Deployment
metadata:
  name: social-service
  namespace: im-system
  labels:
    app: social-service
    app.kubernetes.io/name: social-service
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: instant-messaging
    version: v1.0.0
spec:
  replicas: 2
  selector:
    matchLabels:
      app: social-service
  template:
    metadata:
      labels:
        app: social-service
        app.kubernetes.io/name: social-service
        app.kubernetes.io/component: backend
        app.kubernetes.io/part-of: instant-messaging
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: im-service-account
      containers:
      - name: social-service
        image: im-social-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 21002
          protocol: TCP
        - name: grpc
          containerPort: 22002
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SERVER_PORT
          value: "21002"
        - name: GRPC_PORT
          value: "22002"
        - name: SERVER_MODE
          value: "release"
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: im-config
              key: POSTGRESQL_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: im-config
              key: POSTGRESQL_PORT
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: POSTGRES_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: POSTGRES_PASSWORD
        - name: DB_NAME
          value: "goim_social"
        - name: REDIS_ADDR
          valueFrom:
            configMapKeyRef:
              name: im-config
              key: REDIS_ADDR
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: REDIS_PASSWORD
              optional: true
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: im-config
              key: KAFKA_BROKERS
        - name: TELEMETRY_ENDPOINT
          value: "http://jaeger-collector.im-monitoring.svc.cluster.local:14268/api/traces"
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: im-config
              key: LOG_LEVEL
        - name: METRICS_ENABLED
          valueFrom:
            configMapKeyRef:
              name: im-config
              key: METRICS_ENABLED
        resources:
          requests:
            memory: "256Mi"
            cpu: "150m"
          limits:
            memory: "1Gi"
            cpu: "750m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: config
        configMap:
          name: social-service-config
      - name: logs
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: social-service
  namespace: im-system
  labels:
    app: social-service
    app.kubernetes.io/name: social-service
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: instant-messaging
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 21002
    targetPort: http
    protocol: TCP
  - name: grpc
    port: 22002
    targetPort: grpc
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app: social-service

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: social-service-config
  namespace: im-system
  labels:
    app: social-service
    app.kubernetes.io/name: social-service-config
    app.kubernetes.io/component: configuration
    app.kubernetes.io/part-of: instant-messaging
data:
  config.yaml: |
    server:
      port: 21002
      mode: release

    database:
      postgresql:
        host: postgresql.im-system.svc.cluster.local
        port: 5432
        user: postgres
        password: postgres
        dbname: goim_social
        sslmode: disable
        max_open_conns: 100
        max_idle_conns: 10
        conn_max_lifetime: 3600

    redis:
      addr: redis.im-system.svc.cluster.local:6379
      password: ""
      db: 0
      pool_size: 10
      min_idle_conns: 5

    kafka:
      brokers:
        - kafka.im-system.svc.cluster.local:9092
      producer:
        retry_max: 3
        batch_size: 16384
        linger_ms: 10
        compression_type: snappy

    logger:
      level: info
      format: json
      output: stdout

    telemetry:
      endpoint: http://jaeger-collector.im-monitoring.svc.cluster.local:14268/api/traces
      service_name: social-service
      service_version: 1.0.0
      environment: production
      sample_rate: 0.1

---
# 水平Pod自动扩缩容
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: social-service-hpa
  namespace: im-system
  labels:
    app: social-service
    app.kubernetes.io/name: social-service-hpa
    app.kubernetes.io/component: autoscaling
    app.kubernetes.io/part-of: instant-messaging
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: social-service
  minReplicas: 2
  maxReplicas: 15
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# Pod中断预算
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: social-service-pdb
  namespace: im-system
  labels:
    app: social-service
    app.kubernetes.io/name: social-service-pdb
    app.kubernetes.io/component: availability
    app.kubernetes.io/part-of: instant-messaging
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: social-service

---
# 服务监控
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: social-service-monitor
  namespace: im-system
  labels:
    app: social-service
    app.kubernetes.io/name: social-service-monitor
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: instant-messaging
spec:
  selector:
    matchLabels:
      app: social-service
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
    honorLabels: true
