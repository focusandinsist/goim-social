apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: im-system
  labels:
    app: mongodb
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: instant-messaging
spec:
  serviceName: mongodb
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
        app.kubernetes.io/name: mongodb
        app.kubernetes.io/component: database
    spec:
      securityContext:
        fsGroup: 999
      containers:
      - name: mongodb
        image: mongo:6.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 27017
          name: mongodb
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: MONGO_INITDB_ROOT_USERNAME
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: MONGO_INITDB_ROOT_PASSWORD
        - name: MONGO_INITDB_DATABASE
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: MONGO_INITDB_DATABASE
        volumeMounts:
        - name: mongodb-storage
          mountPath: /data/db
        - name: mongodb-config
          mountPath: /etc/mongod.conf
          subPath: mongod.conf
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
      volumes:
      - name: mongodb-config
        configMap:
          name: mongodb-config
      - name: init-scripts
        configMap:
          name: mongodb-init-scripts
  volumeClaimTemplates:
  - metadata:
      name: mongodb-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: im-ssd
      resources:
        requests:
          storage: 50Gi

---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: im-system
  labels:
    app: mongodb
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: instant-messaging
spec:
  type: ClusterIP
  ports:
  - port: 27017
    targetPort: 27017
    protocol: TCP
    name: mongodb
  selector:
    app: mongodb

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-config
  namespace: im-system
  labels:
    app: mongodb
    app.kubernetes.io/name: mongodb-config
    app.kubernetes.io/component: database
data:
  mongod.conf: |
    # MongoDB配置文件
    storage:
      dbPath: /data/db
      journal:
        enabled: true
      wiredTiger:
        engineConfig:
          cacheSizeGB: 1
        collectionConfig:
          blockCompressor: snappy
        indexConfig:
          prefixCompression: true
    
    systemLog:
      destination: file
      logAppend: true
      path: /var/log/mongodb/mongod.log
      logRotate: rename
      verbosity: 1
    
    net:
      port: 27017
      bindIp: 0.0.0.0
      maxIncomingConnections: 1000
    
    processManagement:
      timeZoneInfo: /usr/share/zoneinfo
    
    security:
      authorization: enabled
    
    operationProfiling:
      slowOpThresholdMs: 100
      mode: slowOp

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-init-scripts
  namespace: im-system
  labels:
    app: mongodb
    app.kubernetes.io/name: mongodb-init-scripts
    app.kubernetes.io/component: database
data:
  01-init-users.js: |
    // 创建应用数据库和用户
    db = db.getSiblingDB('imdb');
    
    // 创建应用用户
    db.createUser({
      user: 'im_user',
      pwd: 'im_password',
      roles: [
        {
          role: 'readWrite',
          db: 'imdb'
        }
      ]
    });
    
    // 创建消息集合
    db.createCollection('messages', {
      validator: {
        $jsonSchema: {
          bsonType: 'object',
          required: ['messageId', 'from', 'content', 'timestamp'],
          properties: {
            messageId: {
              bsonType: 'long',
              description: 'Message ID must be a long and is required'
            },
            from: {
              bsonType: 'long',
              description: 'From user ID must be a long and is required'
            },
            to: {
              bsonType: 'long',
              description: 'To user ID must be a long'
            },
            groupId: {
              bsonType: 'long',
              description: 'Group ID must be a long'
            },
            content: {
              bsonType: 'string',
              description: 'Content must be a string and is required'
            },
            messageType: {
              bsonType: 'int',
              description: 'Message type must be an integer'
            },
            timestamp: {
              bsonType: 'long',
              description: 'Timestamp must be a long and is required'
            }
          }
        }
      }
    });
    
    // 创建索引
    db.messages.createIndex({ 'messageId': 1 }, { unique: true });
    db.messages.createIndex({ 'from': 1, 'timestamp': -1 });
    db.messages.createIndex({ 'to': 1, 'timestamp': -1 });
    db.messages.createIndex({ 'groupId': 1, 'timestamp': -1 });
    db.messages.createIndex({ 'timestamp': -1 });
    
    // 创建其他集合
    db.createCollection('message_history');
    db.message_history.createIndex({ 'userId': 1, 'timestamp': -1 });
    db.message_history.createIndex({ 'messageId': 1 });
    
    print('MongoDB initialization completed');

  02-create-indexes.js: |
    // 创建复合索引和文本索引
    db = db.getSiblingDB('imdb');
    
    // 消息内容全文搜索索引
    db.messages.createIndex({ 'content': 'text' });
    
    // 复合索引优化查询
    db.messages.createIndex({ 'from': 1, 'to': 1, 'timestamp': -1 });
    db.messages.createIndex({ 'groupId': 1, 'from': 1, 'timestamp': -1 });
    
    // TTL索引 - 自动删除30天前的消息历史
    db.message_history.createIndex(
      { 'timestamp': 1 },
      { expireAfterSeconds: 2592000 }  // 30 days
    );
    
    print('MongoDB indexes created successfully');
