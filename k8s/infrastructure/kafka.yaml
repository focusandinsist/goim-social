apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
  namespace: im-system
  labels:
    app: zookeeper
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/component: coordination
    app.kubernetes.io/part-of: instant-messaging
spec:
  serviceName: zookeeper
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
        app.kubernetes.io/name: zookeeper
        app.kubernetes.io/component: coordination
    spec:
      containers:
      - name: zookeeper
        image: confluentinc/cp-zookeeper:7.4.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: server
        - containerPort: 3888
          name: leader-election
        env:
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_TICK_TIME
          value: "2000"
        - name: ZOOKEEPER_INIT_LIMIT
          value: "5"
        - name: ZOOKEEPER_SYNC_LIMIT
          value: "2"
        - name: ZOOKEEPER_SERVER_ID
          value: "1"
        volumeMounts:
        - name: zookeeper-storage
          mountPath: /var/lib/zookeeper/data
        - name: zookeeper-logs
          mountPath: /var/lib/zookeeper/log
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - bash
            - -c
            - "echo 'ruok' | nc localhost 2181"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - bash
            - -c
            - "echo 'ruok' | nc localhost 2181"
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
      volumes:
      - name: zookeeper-logs
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: zookeeper-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: im-ssd
      resources:
        requests:
          storage: 5Gi

---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: im-system
  labels:
    app: zookeeper
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/component: coordination
    app.kubernetes.io/part-of: instant-messaging
spec:
  type: ClusterIP
  ports:
  - port: 2181
    targetPort: 2181
    protocol: TCP
    name: client
  selector:
    app: zookeeper

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: im-system
  labels:
    app: kafka
    app.kubernetes.io/name: kafka
    app.kubernetes.io/component: messaging
    app.kubernetes.io/part-of: instant-messaging
spec:
  serviceName: kafka
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
        app.kubernetes.io/name: kafka
        app.kubernetes.io/component: messaging
    spec:
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:7.4.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9092
          name: kafka
        - containerPort: 9093
          name: kafka-internal
        env:
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper.im-system.svc.cluster.local:2181"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://kafka.im-system.svc.cluster.local:9092,PLAINTEXT_INTERNAL://kafka.im-system.svc.cluster.local:9093"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: "PLAINTEXT_INTERNAL"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
          value: "1"
        - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
          value: "true"
        - name: KAFKA_NUM_PARTITIONS
          value: "3"
        - name: KAFKA_DEFAULT_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_LOG_RETENTION_HOURS
          value: "168"
        - name: KAFKA_LOG_SEGMENT_BYTES
          value: "1073741824"
        - name: KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS
          value: "300000"
        - name: KAFKA_MESSAGE_MAX_BYTES
          value: "1000000"
        - name: KAFKA_REPLICA_FETCH_MAX_BYTES
          value: "1048576"
        volumeMounts:
        - name: kafka-storage
          mountPath: /var/lib/kafka/data
        - name: kafka-config
          mountPath: /etc/kafka/server.properties
          subPath: server.properties
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - kafka-broker-api-versions
            - --bootstrap-server
            - localhost:9092
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - kafka-broker-api-versions
            - --bootstrap-server
            - localhost:9092
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 6
      volumes:
      - name: kafka-config
        configMap:
          name: kafka-config
  volumeClaimTemplates:
  - metadata:
      name: kafka-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: im-ssd
      resources:
        requests:
          storage: 30Gi

---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: im-system
  labels:
    app: kafka
    app.kubernetes.io/name: kafka
    app.kubernetes.io/component: messaging
    app.kubernetes.io/part-of: instant-messaging
spec:
  type: ClusterIP
  ports:
  - port: 9092
    targetPort: 9092
    protocol: TCP
    name: kafka
  selector:
    app: kafka

---
# Kafka初始化Job - 创建Topics
apiVersion: batch/v1
kind: Job
metadata:
  name: kafka-init
  namespace: im-system
  labels:
    app: kafka-init
    app.kubernetes.io/name: kafka-init
    app.kubernetes.io/component: messaging
    app.kubernetes.io/part-of: instant-messaging
spec:
  template:
    metadata:
      labels:
        app: kafka-init
    spec:
      restartPolicy: OnFailure
      containers:
      - name: kafka-init
        image: confluentinc/cp-kafka:7.4.0
        command:
        - /bin/bash
        - -c
        - |
          # 等待Kafka启动
          echo "Waiting for Kafka to be ready..."
          until kafka-broker-api-versions --bootstrap-server kafka.im-system.svc.cluster.local:9092; do
            echo "Kafka not ready, waiting..."
            sleep 5
          done
          
          echo "Kafka is ready, creating topics..."
          
          # 创建Topics
          kafka-topics --create --topic uplink_messages --bootstrap-server kafka.im-system.svc.cluster.local:9092 --partitions 3 --replication-factor 1 --if-not-exists
          kafka-topics --create --topic downlink_messages --bootstrap-server kafka.im-system.svc.cluster.local:9092 --partitions 3 --replication-factor 1 --if-not-exists
          kafka-topics --create --topic interaction-events --bootstrap-server kafka.im-system.svc.cluster.local:9092 --partitions 3 --replication-factor 1 --if-not-exists
          kafka-topics --create --topic comment-events --bootstrap-server kafka.im-system.svc.cluster.local:9092 --partitions 3 --replication-factor 1 --if-not-exists
          kafka-topics --create --topic history-events --bootstrap-server kafka.im-system.svc.cluster.local:9092 --partitions 3 --replication-factor 1 --if-not-exists
          
          echo "Topics created successfully:"
          kafka-topics --list --bootstrap-server kafka.im-system.svc.cluster.local:9092
          
          echo "Kafka initialization completed"
